// @flow

declare module 'utils' {
  // types
  declare type Radians = number
  declare type Degrees = number

  declare type PolarPoint = {|
    angle: number,
    radius: number,
  |}
  declare type PolarPInex = { ...PolarPoint }

  declare type XYPoint = {|
    x: number,
    y: number,
  |}
  declare type XYPInex = { ...XYPoint }

  declare type LineFormula = { a: number, b: number, c: number }

  declare type ArrOrObj<T, Id: string | number> = Array<T> | {| [Id]: T |}

  // functions
  declare function execInCycleWithDelay(
    index: number,
    limit: number,
    delay: number,
    func: (number) => void,
    final_func: (number) => void
  ): void

  // dont use it!!! это дерьмо используется только в src/voronoi.js
  declare function pushUniq<T: any>(element: T, arr: Array<T>): void

  declare function randElement<T>(arr: Array<T>): T

  declare function pairs<T>(list: Array<T>): Array<[T, T]>

  declare function noSameValuesPairs<T>(list: Array<T>): Array<[T, T]>

  declare function noOrderPairs<T>(list: Array<T>): Array<[T, T]>

  declare function noOrderNoSameValuesPairs<T>(list: Array<T>): Array<[T, T]>

  declare function shuffle<T: any>(arr: Array<T>): Array<T>

  declare function normalizeValue(
    value: number,
    max: number,
    normalMax: number,
    min: number,
    normalMin: number
  ): number

  declare function forSublist<T, Id: string | number>(
    data: ArrOrObj<T, Id>,
    sublist: Array<string | number>, // Array<Id> but flow error
    func: (T) => T,
    prop: string
  ): ArrOrObj<T, Id>

  declare function toPolarCoords(XYPInex): PolarPoint

  declare function fromPolarCoords(PolarPInex): XYPoint

  declare function radians(deg: Degrees): Radians

  declare function degrees(rad: Radians): Degrees

  declare function anglesDiff(a: Radians, b: Radians): Radians

  declare function moveByVector(from: XYPInex, to: XYPInex, length: number): XYPoint

  declare function vectorToDist<T: { ...XYPoint }>(from: T, to: T, length: number): XYPoint

  declare function convexPolygonCentroid(points: Array<XYPInex>): XYPoint

  declare function convexPolygonSquare(points: Array<XYPInex>): number

  declare function distance(p1: XYPInex, p2: XYPInex): number

  declare function quadDistance(p1: XYPInex, p2: XYPInex): number

  declare function compareDistance(p1: XYPInex, p2: XYPInex, target: number): number

  declare function gaussFunction(x: number, sigma: number, mu: number): number

  declare function angleBy3Points(a: XYPInex, b: XYPInex, c: XYPInex): Radians

  declare function findNearestPoint<T: XYPInex>(target: XYPInex, points: Array<T>): T

  declare function lineFormula(p1: XYPInex, p2: XYPInex): LineFormula

  declare function linesCrossPoint(f1: LineFormula, f2: LineFormula): ?XYPoint

  declare function intervalsCrossPoint(a1: XYPInex, a2: XYPInex, b1: XYPInex, b2: XYPInex): ?XYPoint

  declare function intervalsCrossPointNoEdge(a1: XYPInex, a2: XYPInex, b1: XYPInex, b2: XYPInex): ?XYPoint

  declare function isSquaresIntersect(a1: XYPInex, a2: XYPInex, b1: XYPInex, b2: XYPInex): boolean

  // ////////////////////////////////////////
  // graph
  // ////////////////////////////////////////
  declare type GraphEdgeId = string
  declare type GraphEdge = {| id: GraphEdgeId, links: Array<GraphEdgeId> |}
  declare type GraphLink = { p1: GraphEdgeId, p2: GraphEdgeId }
  declare type Graph<T: { ...GraphEdge }> = { [string]: T }
  declare type EdgeIdsIndexed = {| [GraphEdgeId]: GraphEdgeId |}

  declare function removeLink<T: { ...GraphEdge }>(graph: Graph<T>, p1: GraphEdgeId, p2: GraphEdgeId): Graph<T>

  declare function removeLinks<T: { ...GraphEdge }>(graph: Graph<T>, links: Array<GraphLink>): Graph<T>

  declare function findSubgraphs<T: { ...GraphEdge }>(graph: Graph<T>): Array<EdgeIdsIndexed>

  declare function findByLinks<T: { ...GraphEdge }>(
    curEdges: Array<GraphEdgeId> | GraphEdgeId,
    graph: Graph<T>,
    filter: (GraphEdge) => boolean,
    closeList: EdgeIdsIndexed
  ): EdgeIdsIndexed
}
